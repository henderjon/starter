# SCRATCH

- https://docs.docker.com/engine/reference/builder/

ALPINE
--------------------------------------------------------------------------------

Alpine Linux uses "apk" as a package manager

GOLANG via Makefile
--------------------------------------------------------------------------------

$ make cgo

- cgo runs 'docker-cgo' that runs a docker image "golang:latest" that invokes 'make linux64-cgo' to compile the linux cgo on mac (as mac doesn't cross compile with cgo very well)
- once compiled in a linux docker image, 'make cgo' echoes the command to copy the binary to ssh:path/in/the/cloud'

```make
# CGO
.PHONY: linux64-cgo
linux64-cgo:
    env CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -mod=vendor -a -ldflags $(LDFLAGS_STATIC) -tags $(STATIC_TAGS) -o $(BINS)/$(BIN)-linux64-cgo-$(HEAD) ./cmd/$(BIN)

.PHONY: docker-cgo
docker-cgo: clean
    # bind mount $PWD to /usr/local/src; set the working dir to /usr/local/src; run make linux64-cgo
    docker run --rm --volume "$(PWD)":/usr/local/src --workdir /usr/local/src golang:latest make linux64-cgo

.PHONY: cgo
cgo: docker-cgo
    $(info scp "$(BINS)/$(BIN)-linux64-cgo-$(HEAD)" "mymix:$(DEPLOYMENT_PATH)")
```

PREFERRED DIRS W/I CONTAINER
--------------------------------------------------------------------------------

source code to compile: $HOME
php files/application: /srv/www
single binary applications: /opt

VOLUMES
--------------------------------------------------------------------------------

Bind mounts share data between host and container while volume mounts are managed by Docker and are portable and persistent.

$ docker run -v HOST/DIR:CONTAINER/DIR
$ docker run -v NAMED-VOLUME:CONTAINER/DIR
$ docker run --mount 'type=bind,src=<HOST/DIR>,dst=<CONTAINER-PATH>'
$ docker run --mount 'type=volume,src=<VOLUME-NAME>,dst=<CONTAINER-PATH>'
